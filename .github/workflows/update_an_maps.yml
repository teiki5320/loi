name: Build AN maps (PA/PO) from archive

on:
  workflow_dispatch:
  schedule:
    - cron: "23 5 * * *"   # quotidien 05:23 UTC

permissions:
  contents: write

jobs:
  build-maps:
    runs-on: ubuntu-latest
    env:
      # Tu peux surcharger l‚ÄôURL via Settings > Actions > Variables : AN_ARCHIVE_URL
      ZIP_FALLBACK_URL: "https://data.assemblee-nationale.fr/static/openData/repository/16/amo/deputes_senateurs_ministres_legislature/AMO20_dep_sen_min_tous_mandats_et_organes.json.zip"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pr√©parer les dossiers
        run: |
          set -e
          mkdir -p data/an16 deputes

      - name: R√©soudre l‚ÄôURL de l‚Äôarchive
        id: url
        run: |
          if [ -n "${{ vars.AN_ARCHIVE_URL }}" ]; then
            echo "url=${{ vars.AN_ARCHIVE_URL }}" >> "$GITHUB_OUTPUT"
            echo "üîó URL depuis la variable AN_ARCHIVE_URL"
          else
            echo "url=${ZIP_FALLBACK_URL}" >> "$GITHUB_OUTPUT"
            echo "üîó URL fallback (16e l√©gislature)"
          fi

      - name: T√©l√©charger l‚Äôarchive (ZIP JSON)
        run: |
          set -e
          curl -fSL "${{ steps.url.outputs.url }}" -o data/an16/amo_archive.zip
          test -s data/an16/amo_archive.zip

      - name: D√©compresser
        run: |
          set -e
          cd data/an16
          rm -rf json
          unzip -o amo_archive.zip
          echo "‚úÖ Archive extraite"

      # --- DEBUG : liste ce que contient le ZIP (super utile la 1re fois) ---
      - name: Debug ‚Äî lister et pr√©visualiser les JSON
        run: |
          set -e
          echo "=== R√©pertoires (profondeur 3) ==="
          find data/an16 -maxdepth 3 -type d -print || true
          echo "=== Quelques fichiers .json ==="
          find data/an16 -name "*.json" | head -n 20 || true
          F=$(find data/an16 -name "*.json" | head -n 1 || true)
          if [ -n "$F" ]; then
            echo "=== Aper√ßu des 120 1res lignes: $F ==="
            sed -n '1,120p' "$F" || true
          else
            echo "‚ö†Ô∏è  Aucun .json trouv√© apr√®s unzip."
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # --- Construction des deux tables de correspondance ---
      - name: Build acteurs_map.json & organes_map.json
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = 'data/an16/json';

          // D√©tection : 1 gros JSON (AMO20_*.json) ou des dossiers acteur/organe
          function findBigJson() {
            try {
              const files = fs.readdirSync(path)
                .filter(f => f.toLowerCase().endsWith('.json'));
              // On privil√©gie le fichier avec "tous_mandats" s'il existe
              const pref = files.find(f => /tous_mandats/i.test(f));
              return pref ? `${path}/${pref}` : (files[0] ? `${path}/${files[0]}` : null);
            } catch { return null; }
          }
          function list(dir) {
            try { return fs.readdirSync(dir).filter(f => f.endsWith('.json')); }
            catch { return []; }
          }

          const acteursMap = {}; // PAxxxx -> "Pr√©nom Nom"
          const organesMap = {}; // POxxxx -> "SIGLE ‚Äî Libell√©"

          const big = findBigJson();
          if (big && fs.existsSync(big)) {
            // --- Mode "gros fichier"
            console.log('üì¶ Parsing big JSON:', big);
            const data = JSON.parse(fs.readFileSync(big, 'utf8'));

            const acteurs = data.acteurs || data.listeActeurs || data.actors || [];
            for (const a of acteurs) {
              const id = String(a?.uid || '').toUpperCase();
              if (!id.startsWith('PA')) continue;
              const prenom = a?.etatCivil?.prenom || a?.prenom || '';
              const nom    = a?.etatCivil?.nom    || a?.nom    || '';
              const label  = [prenom, nom].filter(Boolean).join(' ').trim();
              if (label) acteursMap[id] = label;
            }

            const organes = data.organes || data.organismes || data.organisations || [];
            for (const o of organes) {
              const id = String(o?.uid || '').toUpperCase();
              if (!id.startsWith('PO')) continue;
              const sigle   = o?.sigle || '';
              const libelle = o?.libelle || '';
              const label   = sigle ? (libelle ? `${sigle} ‚Äî ${libelle}` : sigle) : (libelle || id);
              organesMap[id] = label;
            }
          } else {
            // --- Mode "plein de fichiers" : json/acteur/*.json et json/organe/*.json
            console.log('üìÅ Parsing r√©pertoires acteur/organe');
            for (const f of list(`${path}/acteur`)) {
              try {
                const a = JSON.parse(fs.readFileSync(`${path}/acteur/${f}`, 'utf8'));
                const id = String(a?.uid || '').toUpperCase();
                if (!id.startsWith('PA')) continue;
                const prenom = a?.etatCivil?.prenom || a?.prenom || '';
                const nom    = a?.etatCivil?.nom    || a?.nom    || '';
                const label  = [prenom, nom].filter(Boolean).join(' ').trim();
                if (label) acteursMap[id] = label;
              } catch(e){ console.warn('skip acteur', f, e.message); }
            }
            for (const f of list(`${path}/organe`)) {
              try {
                const o = JSON.parse(fs.readFileSync(`${path}/organe/${f}`, 'utf8'));
                const id = String(o?.uid || '').toUpperCase();
                if (!id.startsWith('PO')) continue;
                const sigle   = o?.sigle || '';
                const libelle = o?.libelle || '';
                const label   = sigle ? (libelle ? `${sigle} ‚Äî ${libelle}` : sigle) : (libelle || id);
                organesMap[id] = label;
              } catch(e){ console.warn('skip organe', f, e.message); }
            }
          }

          fs.writeFileSync('deputes/acteurs_map.json', JSON.stringify(acteursMap, null, 2));
          fs.writeFileSync('deputes/organes_map.json', JSON.stringify(organesMap, null, 2));

          console.log(`‚úÖ acteurs_map.json: ${Object.keys(acteursMap).length} entr√©es`);
          console.log(`‚úÖ organes_map.json: ${Object.keys(organesMap).length} entr√©es`);

          if (!Object.keys(acteursMap).length && !Object.keys(organesMap).length) {
            console.error('‚ùå Aucune entr√©e trouv√©e. V√©rifie la structure de l‚Äôarchive (cl√©: acteurs/organes ou json/acteur & json/organe).');
            process.exit(1);
          }
          NODE

      - name: Commit & push si changements
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add deputes/*.json data/an16/*
            git commit -m "chore(an): update acteurs/organes maps depuis l‚Äôarchive"
            git push
          else
            echo "Aucun changement."
          fi
