name: Build AN maps (PA/PO) from archive

on:
  workflow_dispatch:
  schedule:
    - cron: "23 5 * * *"   # tous les jours 05:23 UTC

permissions:
  contents: write

jobs:
  build-maps:
    runs-on: ubuntu-latest
    env:
      # URL directe du ZIP JSON (16e législature — députés/sénateurs/ministres)
      ZIP_FALLBACK_URL: "https://data.assemblee-nationale.fr/static/openData/repository/16/amo/deputes_senateurs_ministres_legislature/AMO20_dep_sen_min_tous_mandats_et_organes.json.zip"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare folders
        run: |
          set -e
          mkdir -p data/an16
          mkdir -p deputes

      - name: Resolve archive URL
        id: url
        run: |
          set -e
          if [ -n "${{ vars.AN_ARCHIVE_URL }}" ]; then
            echo "url=${{ vars.AN_ARCHIVE_URL }}" >> "$GITHUB_OUTPUT"
            echo "Using repo variable AN_ARCHIVE_URL"
          else
            echo "url=${ZIP_FALLBACK_URL}" >> "$GITHUB_OUTPUT"
            echo "Using fallback ZIP_FALLBACK_URL"
          fi

      - name: Download AN archive (ZIP JSON)
        run: |
          set -e
          curl -fSL "${{ steps.url.outputs.url }}" -o data/an16/amo_archive.zip
          test -s data/an16/amo_archive.zip

      - name: Unzip archive
        run: |
          set -e
          cd data/an16
          rm -rf json
          unzip -o amo_archive.zip
          echo "✅ Archive extraite. Aperçu :"
          ls -la
          echo "----"
          ls -la json || true
          echo "----"
          ls -la json/acteur 2>/dev/null | head -n 10 || true
          ls -la json/organe 2>/dev/null | head -n 10 || true

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Build acteurs_map.json & organes_map.json
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = 'data/an16/json';

          function safeList(dir) {
            try { return fs.readdirSync(dir).filter(f => f.endsWith('.json')); }
            catch { return []; }
          }

          // === Acteurs : PAxxxx -> "Prénom Nom"
          const acteursMap = {};
          const acteursFiles = safeList(`${path}/acteur`);
          for (const file of acteursFiles) {
            try {
              const data = JSON.parse(fs.readFileSync(`${path}/acteur/${file}`, 'utf8'));
              const id = String(data?.uid || '').toUpperCase();
              const prenom = data?.etatCivil?.prenom || data?.prenom || '';
              const nom = data?.etatCivil?.nom || data?.nom || '';
              if (id.startsWith('PA')) {
                const label = [prenom, nom].filter(Boolean).join(' ').trim();
                if (label) acteursMap[id] = label;
              }
            } catch (e) {
              console.warn('Skip acteur file', file, e.message);
            }
          }

          // === Organes : POxxxx -> "SIGLE — Libellé" (ou libellé)
          const organesMap = {};
          const organesFiles = safeList(`${path}/organe`);
          for (const file of organesFiles) {
            try {
              const data = JSON.parse(fs.readFileSync(`${path}/organe/${file}`, 'utf8'));
              const id = String(data?.uid || '').toUpperCase();
              if (!id.startsWith('PO')) continue;
              const sigle = data?.sigle || '';
              const libelle = data?.libelle || '';
              const label = sigle ? (libelle ? `${sigle} — ${libelle}` : sigle) : (libelle || id);
              organesMap[id] = label;
            } catch (e) {
              console.warn('Skip organe file', file, e.message);
            }
          }

          // Ecriture
          fs.writeFileSync('deputes/acteurs_map.json', JSON.stringify(acteursMap, null, 2));
          fs.writeFileSync('deputes/organes_map.json', JSON.stringify(organesMap, null, 2));

          console.log(`✅ acteurs_map.json: ${Object.keys(acteursMap).length} entrées`);
          console.log(`✅ organes_map.json: ${Object.keys(organesMap).length} entrées`);

          // Sanity check
          if (!Object.keys(acteursMap).length && !Object.keys(organesMap).length) {
            console.error('❌ Aucune entrée trouvée. Vérifier l’archive et la structure json/acteur & json/organe.');
            process.exit(1);
          }
          NODE

      - name: Commit & push if changed
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add deputes/*.json data/an16/*
            git commit -m "chore(an): update acteurs/organes maps from archive"
            git push
          else
            echo "No changes."
          fi
