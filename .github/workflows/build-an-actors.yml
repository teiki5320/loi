name: Build AN actors (codes + rôles)

on:
  workflow_dispatch:
  schedule:
    - cron: "27 5 * * *"   # chaque jour 05:27 UTC

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ZIP_URL: "https://data.assemblee-nationale.fr/static/openData/repository/16/amo/deputes_senateurs_ministres_legislature/AMO20_dep_sen_min_tous_mandats_et_organes.json.zip"

    steps:
      - uses: actions/checkout@v4

      - name: Prep
        run: mkdir -p data/an16 deputes

      - name: Download AMO archive
        run: |
          curl -fSL "$ZIP_URL" -o data/an16/amo.zip
          test -s data/an16/amo.zip

      - name: Unzip
        run: |
          cd data/an16
          rm -rf json
          unzip -o amo.zip
          echo "== listing =="
          find json -maxdepth 2 -type f -name '*.json' | head -n 20

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build deputes/an_actors.json (codes + rôles)
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const base = 'data/an16/json';

          // 1) trouver le "gros" json (AMO20_*_tous_mandats_*.json)
          const big = fs.readdirSync(base)
            .filter(f => f.endsWith('.json'))
            .sort() // pas crucial
            .find(f => /tous_mandats/i.test(f)) || fs.readdirSync(base).find(f => f.endsWith('.json'));

          if (!big) {
            console.error("❌ Gros JSON introuvable dans", base);
            process.exit(1);
          }

          const data = JSON.parse(fs.readFileSync(`${base}/${big}`, 'utf8'));

          // 2) petite map des organes pour reconnaître Assemblée/Sénat/Gouvernement
          const organes = {};
          for (const o of (data.organes || [])) {
            const uid = String(o?.uid || '').toUpperCase();
            if (!uid) continue;
            organes[uid] = {
              type: (o?.codeType || o?.type || '').toUpperCase(),
              libelle: o?.libelle || '',
              sigle: o?.sigle || ''
            };
          }

          // heuristiques reconnues dans l’AMO :
          // - ASSEMBLEE => député
          // - SENAT     => sénateur
          // - GOUVERNEMENT, EXECUTIF, MINISTERE, MINISTRES => ministre
          const isDep   = t => /ASSEMBLEE/.test(t);
          const isSen   = t => /SENAT/.test(t);
          const isGov   = t => /(GOUVERN|EXECUTIF|MINIST)/.test(t);

          const out = [];

          for (const a of (data.acteurs || [])) {
            const code = String(a?.uid || '').toUpperCase();
            if (!code.startsWith('PA')) continue; // on ne garde que les personnes (PAxxxx)

            // nom/prénom
            const prenom = a?.etatCivil?.prenom || a?.prenom || '';
            const nom    = a?.etatCivil?.nom    || a?.nom    || '';

            // 3) récupérer les rôles à partir des mandats/fonctions
            const roles = new Set();

            const mandats = a?.mandats || a?.listeMandats || [];
            for (const m of mandats) {
              // mandat actif ou dernier mandat (on prend tout, on dédupliquera)
              const orgRef = String(m?.organeRef || m?.organeRef?.uid || '').toUpperCase();
              const org    = organes[orgRef];
              const t      = org?.type || (m?.typeOrgane || '').toUpperCase();

              if (isDep(t)) roles.add('depute');
              if (isSen(t)) roles.add('senateur');
              if (isGov(t)) roles.add('ministre');
            }

            // parfois l’info vient des fonctions/organes liés
            const fonctions = a?.fonctions || a?.fonction || [];
            for (const f of fonctions) {
              const orgRef = String(f?.organeRef || '').toUpperCase();
              const t      = organes[orgRef]?.type || '';
              if (isDep(t)) roles.add('depute');
              if (isSen(t)) roles.add('senateur');
              if (isGov(t)) roles.add('ministre');
            }

            if (roles.size === 0) continue; // on ne sort que ceux qui ont au moins un rôle demandé

            out.push({
              code,
              roles: Array.from(roles),
              nom,
              prenom
            });
          }

          // tri stable : députés/sénateurs/ministres d’abord par nom
          out.sort((a,b) => (a.nom || '').localeCompare(b.nom || '', 'fr', {sensitivity:'base'}) || (a.prenom||'').localeCompare(b.prenom||'', 'fr', {sensitivity:'base'}));

          fs.writeFileSync('deputes/an_actors.json', JSON.stringify(out, null, 2));
          console.log(`✅ an_actors.json écrit (${out.length} entrées)`);
          NODE

      - name: Commit & push
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add deputes/an_actors.json data/an16/*
            git commit -m "chore(an): update an_actors.json (codes + rôles)"
            git push
          else
            echo "Aucun changement."
          fi
