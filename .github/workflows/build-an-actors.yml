name: Build AN actors (codes + rôles)

on:
  workflow_dispatch:
  schedule:
    - cron: "27 5 * * *"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ZIP_URL: "https://data.assemblee-nationale.fr/static/openData/repository/16/amo/deputes_senateurs_ministres_legislature/AMO20_dep_sen_min_tous_mandats_et_organes.json.zip"

    steps:
      - uses: actions/checkout@v4

      - name: Prep
        run: mkdir -p data/an16 deputes

      - name: Download AMO archive
        run: |
          curl -fSL "$ZIP_URL" -o data/an16/amo.zip
          test -s data/an16/amo.zip

      - name: Unzip
        run: |
          cd data/an16
          rm -rf json
          unzip -o amo.zip
          find json -type f -name '*.json' | head -n 20

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build deputes/an_actors.json (codes + rôles)
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');

          const base = 'data/an16/json';

          // Lire tous les fichiers acteurs
          let acteurs = [];
          const actDir = path.join(base, 'acteur');
          if (fs.existsSync(actDir)) {
            for (const f of fs.readdirSync(actDir)) {
              if (!f.endsWith('.json')) continue;
              try {
                const a = JSON.parse(fs.readFileSync(path.join(actDir, f), 'utf8'));
                if (a) acteurs.push(a);
              } catch {}
            }
          }

          // Lire tous les fichiers organes
          let organes = {};
          const orgDir = path.join(base, 'organe');
          if (fs.existsSync(orgDir)) {
            for (const f of fs.readdirSync(orgDir)) {
              if (!f.endsWith('.json')) continue;
              try {
                const o = JSON.parse(fs.readFileSync(path.join(orgDir, f), 'utf8'));
                if (o?.uid) organes[o.uid.toUpperCase()] = o;
              } catch {}
            }
          }

          const isDep = t => /ASSEMBLEE/.test(t);
          const isSen = t => /SENAT/.test(t);
          const isGov = t => /(GOUVERN|EXECUTIF|MINIST)/.test(t);

          const out = [];

          for (const a of acteurs) {
            const code = String(a?.uid || '').toUpperCase();
            if (!code.startsWith('PA')) continue;

            const prenom = a?.etatCivil?.prenom || '';
            const nom = a?.etatCivil?.nom || '';
            const roles = new Set();

            const mandats = a?.mandats || [];
            for (const m of mandats) {
              const orgRef = String(m?.organeRef || '').toUpperCase();
              const org = organes[orgRef];
              const t = org?.codeType || org?.type || '';
              if (isDep(t)) roles.add('depute');
              if (isSen(t)) roles.add('senateur');
              if (isGov(t)) roles.add('ministre');
            }

            if (roles.size === 0) continue;

            out.push({
              code,
              roles: Array.from(roles),
              nom,
              prenom
            });
          }

          out.sort((a,b) => (a.nom||'').localeCompare(b.nom||'', 'fr') || (a.prenom||'').localeCompare(b.prenom||'', 'fr'));

          fs.writeFileSync('deputes/an_actors.json', JSON.stringify(out, null, 2));
          console.log(`✅ an_actors.json écrit (${out.length} entrées)`);
          NODE

      - name: Commit & push
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add deputes/an_actors.json data/an16/*
            git commit -m "chore(an): update an_actors.json (codes + rôles)"
            git push
          else
            echo "Aucun changement."
          fi
