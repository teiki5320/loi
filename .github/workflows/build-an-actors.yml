name: Build AN actors (codes + rôles)

on:
  workflow_dispatch:
  schedule:
    - cron: "27 5 * * *"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      ZIP_URL: "https://data.assemblee-nationale.fr/static/openData/repository/16/amo/deputes_senateurs_ministres_legislature/AMO20_dep_sen_min_tous_mandats_et_organes.json.zip"

    steps:
      - uses: actions/checkout@v4

      - name: Prep
        run: |
          rm -rf data/an16
          mkdir -p data/an16 deputes

      - name: Download AMO archive
        run: |
          curl -fSL "$ZIP_URL" -o data/an16/amo.zip
          test -s data/an16/amo.zip

      - name: Unzip
        run: |
          cd data/an16
          unzip -o amo.zip
          echo "== Listing =="
          ls -lah

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build deputes/an_actors.json (from BIG JSON)
        run: |
          node - <<'NODE'
          const fs = require('fs');
          const path = require('path');

          const base = 'data/an16';
          const files = fs.readdirSync(base).filter(f => f.toLowerCase().endsWith('.json'));
          if (!files.length) {
            console.error('❌ Aucun .json trouvé dans data/an16 (attendu: gros JSON).');
            process.exit(1);
          }

          // On prend le plus gros fichier JSON (le "gros JSON" AN)
          let biggest = files[0];
          let maxSize = 0;
          for (const f of files) {
            const s = fs.statSync(path.join(base, f)).size;
            if (s > maxSize) { maxSize = s; biggest = f; }
          }
          const bigPath = path.join(base, biggest);
          console.log('ℹ️ Gros JSON détecté :', biggest, `${(maxSize/1024/1024).toFixed(2)} MB`);

          const big = JSON.parse(fs.readFileSync(bigPath, 'utf8'));

          // Les clés varient peu : acteurs/acteursListe, organes
          const acteursArr =
            big?.acteurs || big?.acteur || big?.acteursListe || [];
          const organesArr =
            big?.organes || big?.organe || [];

          // Index organes par uid
          const organes = {};
          for (const raw of organesArr) {
            const o = raw?.organe || raw;
            const uid = String(o?.uid || o?.id || '').toUpperCase();
            if (!uid) continue;
            organes[uid] = o;
          }

          function isDep(type){ return /ASSEMBLEE/i.test(type); }
          function isSen(type){ return /SENAT/i.test(type); }
          function isGov(type){ return /(GOUVERN|EXECUTIF|MINIST)/i.test(type); }

          const out = [];

          for (const raw of acteursArr) {
            const a = raw?.acteur || raw;
            const code = String(a?.uid || a?.id || '').toUpperCase();
            if (!code.startsWith('PA')) continue; // on garde les personnes

            // Nom/prénom (souvent sous etatCivil)
            const ec = a?.etatCivil || {};
            const nom = (a?.nom || ec?.nom || '').toString();
            const prenom = (a?.prenom || ec?.prenom || '').toString();

            // Mandats -> organeRef -> type d’organe
            const mandats = Array.isArray(a?.mandats) ? a.mandats :
                            (Array.isArray(a?.mandat) ? a.mandat : []);
            const roles = new Set();
            for (const m of mandats) {
              const ref = String(m?.organeRef || m?.organeRefProvisoire || '').toUpperCase();
              const org = organes[ref];
              const type = org?.codeType || org?.type || '';
              if (isDep(type)) roles.add('depute');
              if (isSen(type)) roles.add('senateur');
              if (isGov(type)) roles.add('ministre');
            }
            if (!roles.size) continue;

            out.push({ code, nom, prenom, roles: [...roles] });
          }

          out.sort((a,b) =>
            (a.nom||'').localeCompare(b.nom||'', 'fr') ||
            (a.prenom||'').localeCompare(b.prenom||'', 'fr')
          );

          fs.writeFileSync('deputes/an_actors.json', JSON.stringify(out, null, 2));
          console.log(`✅ Écrit deputes/an_actors.json (${out.length} entrées)`);
          NODE

      - name: Commit & push
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name  "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add deputes/an_actors.json data/an16/*
            git commit -m "chore(an): update deputes/an_actors.json"
            git push
          else
            echo "No changes."
          fi
