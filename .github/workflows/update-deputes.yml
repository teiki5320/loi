name: Update deputes.json (daily, AMO10 L17)

on:
  workflow_dispatch:
  schedule:
    - cron: "17 3 * * *"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install unzip + jq
        run: sudo apt-get update && sudo apt-get install -y unzip jq

      - name: Download AMO10 (L17) ZIP
        run: |
          set -eux
          curl -fsSL \
            "https://data.assemblee-nationale.fr/static/openData/repository/17/amo/deputes_actifs_mandats_actifs_organes/AMO10_deputes_actifs_mandats_actifs_organes.json.zip" \
            -o data.zip

      - name: Extract JSON files
        run: |
          set -eux
          rm -rf data
          mkdir -p data
          unzip -o data.zip -d data
          echo "=== Arborescence extraite ==="
          find data -maxdepth 4 -type d -print | sed 's/^/DIR: /'
          echo "=== Fichiers JSON (premiers 20) ==="
          find data -type f -name '*.json' | head -20

      # -------- deputes/deputes.json ----------
      - name: Build deputes.json (parser AMO10)
        run: |
          set -eux
          mkdir -p deputes
          # Cherche les fichiers "acteur"
          mapfile -t ACTEUR_FILES < <(find data -type f -path '*/json/acteur/*.json' | sort)
          echo "Nb fichiers acteur: ${#ACTEUR_FILES[@]}"
          if [ ${#ACTEUR_FILES[@]} -eq 0 ]; then
            echo "ERREUR: aucun fichier acteur trouvé sous */json/acteur/*.json"
            exit 1
          fi

          jq -s '
            map(.acteur)
            | map({
                id:     (.uid["#text"] // ""),
                nom:    (((.etatCivil.ident.prenom // "") + " " + (.etatCivil.ident.nom // "")) | gsub("^\\s+|\\s+$";"")),
                email: (
                  ( [ (.adresses.adresse[]? | select(.typeLibelle=="Mèl") | .valElec) ] ) as $mails
                  | ( $mails[] | select(test("assemblee-nationale\\.fr$")) ) // ($mails[0] // "")
                ),
                _mAss: ((.mandats.mandat // []) | map(select(.typeOrgane=="ASSEMBLEE")) | .[0]),
                _mGp:  ((.mandats.mandat // []) | map(select(.typeOrgane=="GP"))         | .[0])
              })
            | map(
                .circo  = (._mAss.election.lieu.numCirco   // "") |
                .dept   = (._mAss.election.lieu.departement // "") |
                .groupe = (._mGp.organes.organeRef // "") |
                del(._mAss, ._mGp)
              )
          ' "${ACTEUR_FILES[@]}" > deputes/deputes.json

          echo "Taille deputes.json : $(jq length deputes/deputes.json)"

      # -------- maps/deputes_map.json (PA -> "Prénom Nom") ----------
      - name: Build deputes_map.json (PA → Nom)
        run: |
          set -eux
          mkdir -p maps
          mapfile -t ACTEUR_FILES < <(find data -type f -path '*/json/acteur/*.json' | sort)
          if [ ${#ACTEUR_FILES[@]} -eq 0 ]; then
            echo "{}" > maps/deputes_map.json
          else
            jq -s '
              map(.acteur)
              | map({
                  key: (.uid["#text"] // ""),
                  value: (((.etatCivil.ident.prenom // "") + " " + (.etatCivil.ident.nom // "")) | gsub("^\\s+|\\s+$";""))
                })
              | from_entries
            ' "${ACTEUR_FILES[@]}" > maps/deputes_map.json
          fi
          echo "Entrées PA: $(jq length maps/deputes_map.json)"

      # -------- maps/organes_map.json (PO -> {nom,sigle}) ----------
      - name: Build organes_map.json (PO → {nom, sigle})
        run: |
          set -eux
          mkdir -p maps
          mapfile -t ORG_FILES < <(find data -type f -path '*/json/organe/*.json' | sort)
          if [ ${#ORG_FILES[@]} -eq 0 ]; then
            echo "{}" > maps/organes_map.json
          else
            jq -s '
              map(.organe)
              | map(select(.uid?))
              | map({
                  key: (.uid["#text"] // ""),
                  value: {
                    nom:   (.libelle // .libelleEdition // .libelleAbrege // .acronyme // .sigle // (.uid["#text"] // "")),
                    sigle: (.libelleAbrege // .acronyme // .sigle // (.uid["#text"] // ""))
                  }
                })
              | from_entries
            ' "${ORG_FILES[@]}" > maps/organes_map.json
          fi
          echo "Entrées PO: $(jq length maps/organes_map.json)"

      - name: Commit & push if changed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update deputes & maps from AMO10 L17"
          file_pattern: |
            deputes/deputes.json
            maps/deputes_map.json
            maps/organes_map.json
