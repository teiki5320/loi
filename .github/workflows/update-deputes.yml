name: Update deputes.json (daily, AMO10 L17)

on:
  workflow_dispatch:            # lancement manuel possible
  schedule:
    - cron: "17 3 * * *"        # tous les jours à 03:17 UTC

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install unzip + jq
        run: sudo apt-get update && sudo apt-get install -y unzip jq

      - name: Download AMO10 (L17) ZIP
        run: |
          set -eux
          curl -fsSL \
            "https://data.assemblee-nationale.fr/static/openData/repository/17/amo/deputes_actifs_mandats_actifs_organes/AMO10_deputes_actifs_mandats_actifs_organes.json.zip" \
            -o data.zip

      - name: Extract JSON files
        run: |
          set -eux
          rm -rf data
          mkdir -p data
          unzip -o data.zip -d data
          echo "Contenu extrait :"
          find data -maxdepth 3 -type f | sort | head -n 40

      # ------------------------------------------------------------------
      # 1) Construire la map des groupes (POxxxxx -> {sigle, nom})
      #    Correction : uid peut être un objet {"#text": "PO..."} OU une string "PO..."
      # ------------------------------------------------------------------
      - name: Build organes_map.json (PO → {nom, sigle})
        run: |
          set -eux
          mkdir -p maps
          mapfile -t ORG_FILES < <(find data -type f -path '*/json/organe/*.json' | sort)

          if [ ${#ORG_FILES[@]} -eq 0 ]; then
            echo '{}' > maps/organes_map.json
          else
            jq -s '
              map(.organe)
              | map(select((.codeType // "") == "GP"))
              | map({
                  key: (
                    if (.uid | type) == "object" then .uid["#text"] else .uid end
                  ),
                  value: {
                    sigle: (.libelleAbrege // .acronyme // ""),
                    nom:   (.libelle       // .libelleAbrege // .acronyme // "")
                  }
                })
              | from_entries
            ' "${ORG_FILES[@]}" > maps/organes_map.json
          fi

          echo "Groupes trouvés : $(jq 'length' maps/organes_map.json)"

      # ------------------------------------------------------------------
      # 2) Générer deputes/deputes.json à partir des fichiers acteurs,
      #    enrichi avec sigle/nom du groupe via maps/organes_map.json
      # ------------------------------------------------------------------
      - name: Build deputes.json (parser AMO10 + enrichissement groupe)
        run: |
          set -eux
          mkdir -p deputes

          # Lister les fichiers acteurs
          mapfile -t ACT_FILES < <(find data -type f -path '*/json/acteur/*.json' | sort)

          if [ ${#ACT_FILES[@]} -eq 0 ]; then
            echo '[]' > deputes/deputes.json
          else
            jq -s --slurpfile GMAP maps/organes_map.json '
              # $GMAP[0] = objet {"POxxxxx": {"sigle": "...", "nom": "..."}}
              map(.acteur)
              | map({
                  id: (
                        if (.uid | type) == "object" then .uid["#text"] else .uid end
                      ),
                  nom: (
                        ((.etatCivil.ident.prenom // "") + " " + (.etatCivil.ident.nom // ""))
                        | gsub("^\\s+|\\s+$";"")
                      ),
                  email: (
                    ( [ (.adresses.adresse[]?
                          | select(.typeLibelle=="Mèl")
                          | .valElec) ] ) as $mails
                    | ( $mails[] | select(test("assemblee-nationale\\.fr$")) )
                      // ($mails[0] // "")
                  ),
                  _mAss: (
                    ( .mandats.mandat // [] )
                    | map(select(.typeOrgane=="ASSEMBLEE"))
                    | .[0]
                  ),
                  _mGp: (
                    ( .mandats.mandat // [] )
                    | map(select(.typeOrgane=="GP"))
                    | .[0]
                  )
                }
                | .circo   = (._mAss.election.lieu.numCirco   // "")
                | .dept    = (._mAss.election.lieu.departement // "")
                | .groupe  = (._mGp.organes.organeRef // "")
                | .sigle   = ($GMAP[0][.groupe].sigle // "")
                | .groupeNom = ($GMAP[0][.groupe].nom // "")
                | del(._mAss, ._mGp)
              )
            ' "${ACT_FILES[@]}" > deputes/deputes.json
          fi

          jq 'length' deputes/deputes.json

      - name: Commit & push if changed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update deputes.json from AMO10 L17 (with group names)"
          file_pattern: |
            deputes/deputes.json
            maps/organes_map.json
